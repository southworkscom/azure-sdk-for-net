// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.BotFramework.Connector.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ActivityType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ActivityType
    {
        /// <summary>
        /// Represents a communication between bot and user.
        /// </summary>
        [EnumMember(Value = "message")]
        Message,
        /// <summary>
        /// Indicates that the bot was added to a conversation, other members
        /// were added to or removed from the conversation, or conversation
        /// metadata has changed.
        /// </summary>
        [EnumMember(Value = "conversationUpdate")]
        ConversationUpdate,
        /// <summary>
        /// Indicates that the bot was added or removed from a user's contact
        /// list.
        /// </summary>
        [EnumMember(Value = "contactRelationUpdate")]
        ContactRelationUpdate,
        /// <summary>
        /// Indicates that the user or bot on the other end of the conversation
        /// is compiling a response.
        /// </summary>
        [EnumMember(Value = "typing")]
        Typing,
        /// <summary>
        /// Indicates the end of a conversation.
        /// </summary>
        [EnumMember(Value = "endOfConversation")]
        EndOfConversation,
        /// <summary>
        /// Represents a communication sent to a bot that is not visible to the
        /// user.
        /// </summary>
        [EnumMember(Value = "event")]
        Event,
        /// <summary>
        /// Represents a communication sent to a bot to request that it perform
        /// a specific operation. This activity type is reserved for internal
        /// use by the Microsoft Bot Framework.
        /// </summary>
        [EnumMember(Value = "invoke")]
        Invoke
    }
    internal static class ActivityTypeEnumExtension
    {
        internal static string ToSerializedValue(this ActivityType? value)
        {
            return value == null ? null : ((ActivityType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ActivityType value)
        {
            switch( value )
            {
                case ActivityType.Message:
                    return "message";
                case ActivityType.ConversationUpdate:
                    return "conversationUpdate";
                case ActivityType.ContactRelationUpdate:
                    return "contactRelationUpdate";
                case ActivityType.Typing:
                    return "typing";
                case ActivityType.EndOfConversation:
                    return "endOfConversation";
                case ActivityType.Event:
                    return "event";
                case ActivityType.Invoke:
                    return "invoke";
            }
            return null;
        }

        internal static ActivityType? ParseActivityType(this string value)
        {
            switch( value )
            {
                case "message":
                    return ActivityType.Message;
                case "conversationUpdate":
                    return ActivityType.ConversationUpdate;
                case "contactRelationUpdate":
                    return ActivityType.ContactRelationUpdate;
                case "typing":
                    return ActivityType.Typing;
                case "endOfConversation":
                    return ActivityType.EndOfConversation;
                case "event":
                    return ActivityType.Event;
                case "invoke":
                    return ActivityType.Invoke;
            }
            return null;
        }
    }
}

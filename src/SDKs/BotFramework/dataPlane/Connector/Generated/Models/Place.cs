// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.BotFramework.Connector.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Place (entity type: "https://schema.org/Place").
    /// </summary>
    public partial class Place
    {
        /// <summary>
        /// Initializes a new instance of the Place class.
        /// </summary>
        public Place()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Place class.
        /// </summary>
        /// <param name="address">Address of the place (may be `string` or
        /// complex object of type "PostalAddress").</param>
        /// <param name="geo">A GeoCoordinates object that specifies the
        /// geographical coordinates of the place.</param>
        /// <param name="hasMap">Map to the place (may be `string` (URL) or
        /// complex object of type "Map").</param>
        /// <param name="type">This object's type. Always set to Place.</param>
        /// <param name="name">Name of the place.</param>
        public Place(object address = default(object), GeoCoordinates geo = default(GeoCoordinates), object hasMap = default(object), string type = default(string), string name = default(string))
        {
            Address = address;
            Geo = geo;
            HasMap = hasMap;
            Type = type;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets address of the place (may be `string` or complex
        /// object of type "PostalAddress").
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public object Address { get; set; }

        /// <summary>
        /// Gets or sets a GeoCoordinates object that specifies the
        /// geographical coordinates of the place.
        /// </summary>
        [JsonProperty(PropertyName = "geo")]
        public GeoCoordinates Geo { get; set; }

        /// <summary>
        /// Gets or sets map to the place (may be `string` (URL) or complex
        /// object of type "Map").
        /// </summary>
        [JsonProperty(PropertyName = "hasMap")]
        public object HasMap { get; set; }

        /// <summary>
        /// Gets or sets this object's type. Always set to Place.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets name of the place.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}
